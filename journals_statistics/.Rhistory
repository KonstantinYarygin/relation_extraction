y <- 5:1
x %scalar% y
# 2
`(` <- function(x){
if (runif(1) < 0.1)
return(0)
else
return(x)
}
aaply(1:100, function(x)(x))
aaply(1:100, function(x) x + 1)
llply(1:100, function(x) x + 1)
laply(1:100, function(x) x + 1)
laply(1:100, function(x) x)
laply(1:100, function(x) (x))
laply(1:100, (x))
laply(1:100, function(x)(x))
rm('(')
`set_diag_el<-` <- function(x){x + 12}
set_diag_el(x)
`set_diag_el<-` <- function(x, value) {x[2] <- value}
a <- 1:10
set_diag_el(a) <- 15
a
a <- 1:10
a
set_diag_el(a) <- 15
a
`set_diag_el<-` <- function(x, value) {
x[2] <- value
x
}
a <- 1:10
set_diag_el(a) <- 15
a
m <- matrix(1:40, ncol=8)
m
laply(m(1:nrow(m), function(x) m(x) <- 100)
)
laply(m(1:nrow(m), function(x) m(x) <- 100))
lapply(m(1:nrow(m), function(x) m(x) <- 100))
lapply(1:nrow(m), function(x) m(x) <- 100)
lapply(1:nrow(m), function(x) m[x, x] <- 100)
m
lapply(m, function(x) x**2)
`set_diag_el<-` <- function(x, value) {
for (i in 1:min(nrow(x), ncol(x)))
m[i ,i] <- value
return(m)
}
m <- matrix(1:40, ncol=8)
set_diag_el(m) <- 100
m
diag(m)
diag(m) <- 12
m
`set_diag_el<-` <- diag
set_diag_el(m) <- 100
`set_diag_el<-` <- `diag<-`
set_diag_el(m) <- 100
m
`set_diag_el<-` <- function(x, value) {
# как сделать без цикла?
m[row(x) == col(x)] <- value
}
`set_diag_el<-` <- function(x, value) {
# как сделать без цикла?
m[row(x) == col(x)] <- value
`set_diag_el<-` <- function(x, value) {
# как сделать без цикла?
x[row(x) == col(x)] <- value
return(x)
}
m <- matrix(1:40, ncol=8)
set_diag_el(m) <- 100
m
`set_diag_el<-` <- function(x, value) {
x[row(x) == col(x)] <- value
return(x)
}
m <- matrix(1:40, ncol=8)
set_diag_el(m) <- 100
m
vector_cos <- function(s1, s2){
return(sum(s1 * s2) / sqrt(sum(s1 ** 2)) / sqrt(sum(s2 ** 2)))
}
m1 <- sapply(l1, function(x) sapply(l1, function(y) FUN=vector_cos(x, y)))
l1 <- replicate(30, runif(10), simplify = F)
l1 <- replicate(30, runif(10), simplify = F)
m1 <- sapply(l1, function(x) sapply(l1, function(y) FUN=vector_cos(x, y)))
m1
sapply(1:30, function(x) mean(m1[x, -x]))
aaply(1:30, function(x) mean(m1[x, -x]))
library("plyr", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
aaply(1:30, function(x) mean(m1[x, -x]))
alply(1:30, function(x) mean(m1[x, -x]))
laply(1:30, function(x) mean(m1[x, -x]))
laply(1:30, function(x) mean(m[x, -x]))
m
laply(1:30, function(x) mean(m[x, -x]))
m <- matrix(1:100, ncol=10)
set_diag_el(m) <- 100
m
set_diag_el(m) <- 0
m
laply(1:30, function(x) mean(m[x, -x]))
laply(1:10, function(x) mean(m[x, -x]))
llply(1:10, function(x) mean(m[x, -x]))
ldply(1:10, function(x) mean(m[x, -x]))
laply(1:10, function(x) mean(m[x, -x]))
lfunc <- c(mean, max, min, sd, function(x) max(x)/min(x), function(x) mean(x) - median(x))
m
aaply(m, 1, function(x) laply(lfunc, function(f) f(x)))
m <- matrix(1:100, ncol=10)
set_diag_el(m) <- 1
lfunc <- c(mean, max, min, sd, function(x) max(x)/min(x), function(x) mean(x) - median(x))
aaply(m, 1, function(x) laply(lfunc, function(f) f(x)))
adply(m, 1, function(x) laply(lfunc, function(f) f(x)))
# создаем два списка
l1 <- list(A = 1:3)
l2 <- list(A = 2:4)
`+.test` <- function(x, y) x$A + y$A
l1 + l2
class(l1) <- "test"
class(l2) <- "test"
l1 + l2
l1
l1 <- list(A = 1:3)
l2 <- list(A = 2:4)
# перегружаем `+` для класса "test"
`+.test` <- function(x, y) {
a <- list(A = x$A + y$A)
class(a) <- 'test'
a
}
# убеждаемся, что не работает
l1 + l2
class(l1) <- "test"
class(l2) <- "test"
l1 + l2
set.seed(11)
x <- sample(11, size = 10)
sum(x)
f <- function(){x <- x ** 2}
x <- 1:10
f(x)
f()
f()
x <- 1:10
f <- function(){
x <- x ** 2
x
}
f()
rm('x')
f()
e <- new.env()
x <- 1:10
f <- function(){
x <- x ** 2
x
}
f()
e <- new.env()
parent.env(e)
parent.env(x)
environment(x)
environment('x')
environment(x)
?envirament
?environment
environment(f)
environment(f) <- e
f()
environment(f)
ls()
globalenv()
ls(globalenv())
e <- new.env()
ls(e)
environment(f) <- e
ls(e)
environment(f)
ls(e)
ls(globalenv())
f()
ls(globalenv())
e <- new.env()
ls(e)
environment(f) <- e
environment(f)
ls(e)
ls(globalenv())
e <- new.env()
ls(e)
parent.env(e)
parent.env(globalenv())
rm(list = ls())
x <- 1:10
f <- function(){
x <- x ** 2
x
}
f()
ls(globalenv())
e <- new.env()
ls(e)
parent.env(e)
environment(f)
environment(f) <- e
environment(f)
ls(e)
ls(globalenv())
environment(e$f)
install.packages("fpc")
###########################################################################
#####     function for simulation of predefined bacterial percents    #####
###########################################################################
print('Comparison with clustering of randomized simulated samples:
randomize using column (feature) means, SD and normal approximation.
All values below 0 are transformed into 0.')
print('Simulate a group of 100 samples many times')
source("/data1/bio/runs-veronika1/R/kmer/common/functions_anya.R")
set.seed(1) # random seed
NSIMS <- 100 # number of simulations
print("Number of simulations:")
print(NSIMS)
mean_asw <- rep(0, 6)
library(fpc)
#### get example real matrix of bac composition
load("/data1/bio/runs-veronika1/R/kmer/China_2013_HMP_NR.genus.RData")
ind <- which(colSums(Bac_data)==0)
Bac_data <- Bac_data[,-ind]
ind <- which(colSums(Bac_data)<300)
Bac_norm <- Bac_data / rowSums(Bac_data)
GenFeatVectRusNZp <- Bac_norm
for(hh in 1:NSIMS)
{
finVec <- c()
for (i in colnames(GenFeatVectRusNZp)) #GenFeatVectRusNZp -metagenome abundance table in %
{
curM <- mean(GenFeatVectRusNZp[,i])
curSd <- sd(GenFeatVectRusNZp[,i])
genVec <- rnorm(100, curM, curSd)
for (j in 1:length(genVec))
{
if (genVec[j] < 0)
{
genVec[j] <- 0
}
}
finVec <- cbind(finVec,genVec)
}
colnames(finVec) <- colnames(GenFeatVectRusNZp)
rownames(finVec) <- c(1:100)
finVecDist <- allDist(finVec)
finVecASW <- clusPAM2(finVecDist)
mean_asw  <-  mean_asw + as.numeric(finVecASW[,2])/NSIMS
}
names(mean_asw)  <-  finVecASW[,1]
print("Mean ASW for clusters in randomized simulated data:")
print(mean_asw)
print("- is much lower than for real data:")
rusdist <- allDist(Bac_norm)
rusASW <- clusPAM2(rusdist)
print(as.numeric(rusASW[,2]) / mean_asw)
rowSums(finVec_norm)
finVec_norm <- finVec / rowSums(finVec)
write.table(finVec_norm, file="sim_diff.txt", sep="\t") save percents
print('Comparison with clustering of randomized simulated samples:
randomize using column (feature) means, SD and normal approximation.
All values below 0 are transformed into 0.')
print('Simulate a group of 100 samples many times')
source("/data1/bio/runs-veronika1/R/kmer/common/functions_anya.R")
getwd()
setwd()
rm(list=ls('/home/konstantin/documents/projects/python/text_mining/relation_extraction/journals_statistics'))
setwd('/home/konstantin/documents/projects/python/text_mining/relation_extraction/journals_statistics')
rm(list=ls())
impact_list <- read.table('impact_list.txt')
head(impact_list)
journal_list <- read.table('journal_list.txt')
journals_list <- read.table('journals_list.txt')
journal_list <- read.table('journal_list.txt')
journal_list <- read.csv('journal_list.txt')
impact_list <- read.csv('impact_list.txt')
journal_list <- read.csv('journal_list.txt')
impact_list <- read('impact_list.txt')
impact_list <- scan('impact_list.txt')
journal_list <- scan('journal_list.txt')
journal_list <- scan('journal_list.txt')
journal_list <- scan('journal_list.txt',wwhat = character)
journal_list <- scan('journal_list.txt',what = character)
journal_list <- scan('journal_list.txt',what=character())
journal_list <- scan('journal_list.txt',what=character(), sep = "\n")
impact_list <- scan('impact_list.txt',what=double(), sep = "\n", na.string='NO IMPACT')
impact_list <- scan('impact_list.txt',what=double(), sep = "\n", na.string="NO IMPACT")
impact_list <- scan('impact_list.txt',what=double(), sep = "\n", na.string=c("NO IMPACT"))
impact_list <- scan('impact_list.txt', what=double(), sep = "\n", na.string=c("NOIMPACT"))
impact_list <- scan('impact_list.txt', what=numeric(), sep = "\n", na.string=c("NOIMPACT"))
impact_list <- scan('impact_list.txt', what=numeric(), sep = "\n", na.string=c("NO IMPACT"))
journal_list <- read.table('journal_list.txt', sep = "\n")
impact_list <- read.table('impact_list.txt', sep = "\n", na.string=c("NO IMPACT"))
journal_list <- scan('journal_list.txt',what=character(), sep = "\n")
journal_list <- table(journal=scan('journal_list.txt',what=character(), sep = "\n"))
journal_list <- data.frame(journal=scan('journal_list.txt',what=character(), sep = "\n"))
View(impact_list)
journal_list <- scan('journal_list.txt',what=character(), sep = "\n")
colnames(journal_list) <- c('journal')
journal_list$n <- 1
journal_list <- scan('journal_list.txt',what=character(), sep = "\n")
journal_list <- scan('journal_list.txt',what=character(), sep = "\n")
journal_list <- data.frame(journal=journal_list)
journal_list$n <- 1
agg_journal_list <- aggregate(journal_list$n, by=list(journal_list$journal), FUN=sum)
View(agg_journal_list)
hist(agg_journal_list$n)
hist(agg_journal_list$x)
barplot(agg_journal_list)
?barplot
barplot(agg_journal_list$x)
barplot(sorted(agg_journal_list$x))
barplot(sort(agg_journal_list$x))
barplot(sort(-agg_journal_list$x))
barplot(sort(agg_journal_list$x, decreasing = T))
?barplot
barplot(sort(agg_journal_list$x, decreasing = T), axes=F)
axis(side=1, at = NULL, labels = TRUE)
axis(side=2, at = NULL, labels = TRUE)
agg_journal_list$x
sort(agg_journal_list$x, decreasing = T)
sort(agg_journal_list$x)
View(agg_journal_list)
sort(agg_journal_list$x, decreasing = T)
sort(agg_journal_list$x, decreasing = T)[:5]
sort(agg_journal_list$x, decreasing = T)[seq(1, 20)]
sum(sort(agg_journal_list$x, decreasing = T)[seq(1, 20)])
sum(sort(agg_journal_list$x, decreasing = T)[seq(1, 50)])
sum(sort(agg_journal_list$x, decreasing = T)[seq(1, 40)])
sum(sort(agg_journal_list$x, decreasing = T)[seq(1, 30)])
sum(sort(agg_journal_list$x, decreasing = T)[seq(1, 25)])
sum(sort(agg_journal_list$x, decreasing = T)[seq(1, 20)])
barplot(sort(agg_journal_list$x, decreasing = T), axes=F)
axis(side=1, at = NULL, labels = TRUE)
axis(side=2, at = NULL, labels = TRUE)
axis()
?axis
?barplot
barplot(sort(agg_journal_list$x, decreasing = T), axes=F, xlab='Journal num', ylab='Sentences')
axis(side=1, at = NULL, labels = TRUE)
axis(side=2, at = NULL, labels = TRUE)
barplot(sort(agg_journal_list$x, decreasing = T), axes=F, xlab='Journal serial number', ylab='Sentences')
axis(side=1, at = NULL, labels = TRUE)
axis(side=2, at = NULL, labels = TRUE)
journal_list[order(journal_list$x), ]
journal_list[order(journal_list$x), ]
View(agg_journal_list)
journal_list[order(journal_list$x)]
order(journal_list$x)
journal_list$x
journal_list$n
journal_list[order(journal_list$n)]
journal_list[order(journal_list$n), ]
agg_journal_list[order(journal_list$x), ]
agg_journal_list[order(agg_journal_list$x), ]
agg_journal_list[order(agg_journal_list$x, decreasing = T), ]
a <- agg_journal_list[order(agg_journal_list$x, decreasing = T), ]
View(a)
journal_list <- scan('journal_list.txt',what=character(), sep = "\n")
journal_list <- data.frame(journal=journal_list)
journal_list$n <- 1
agg_journal_list <- aggregate(journal_list$n, by=list(journal_list$journal), FUN=sum)
agg_journal_list <- agg_journal_list[order(agg_journal_list$x, decreasing = T), ]
barplot(agg_journal_list$x)
axis(side=1)
barplot(agg_journal_list$x, xlab='Journal number', ylab='Sentences')
axis(side=1)
?hist
journal_list <- scan('journal_list.txt',what=character(), sep = "\n")
journal_list <- data.frame(journal=journal_list)
journal_list$n <- 1
agg_journal_list <- aggregate(journal_list$n, by=list(journal_list$journal), FUN=sum)
agg_journal_list <- agg_journal_list[order(agg_journal_list$x, decreasing = T), ]
barplot(agg_journal_list$x, xlab='Journal number', ylab='Sentences', main='Sentences per journal histogram')
axis(side=1)
barplot(agg_journal_list$x[1:20])
barplot(agg_journal_list$x[1:20],names.arg=agg_journal_list$journal[1:20],horiz=TRUE)
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$journal[20:1],horiz=TRUE)
agg_journal_list$journal[20:1]
View(agg_journal_list)
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
par(las=2)
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
par(mar=c(5,8,4,2))
par(las=2)
par(mar=c(5,8,4,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
par(las=2)
par(mar=c(10,8,4,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
par(las=2)
par(mar=c(5,12,4,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
par(las=2)
par(mar=c(1,12,4,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
impact_list <- read.table('impact_list.txt', what=numeric(), sep = "\n", na.string=c("NO IMPACT"))
par(las=2)
par(mar=c(4,12,4,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
par(las=2)
par(mar=c(4,12,1,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
par(las=2)
par(mar=c(4,15,1,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
par(las=2)
par(mar=c(4,20,1,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
par(las=2)
par(mar=c(4,18,1,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
impact_list <- read.table('impact_list.txt', what=numeric(), sep = "\n", na.string=c("NO IMPACT"))
par(las=2)
par(mar=c(4,18,1,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE)
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE, xlab = 'Sentences')
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE, xlab = 'Sentence number')
par(las=2)
par(mar=c(4,18,1,2))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE, xlab = 'Number of sentences')
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE, xlab = 'Number of sentences'col='lightblue')
impact_list <- read.table('impact_list.txt', what=numeric(), sep = "\n", na.string=c("NO IMPACT"))
barplot(agg_journal_list$x[20:1],names.arg=agg_journal_list$Group.1[20:1],horiz=TRUE, xlab = 'Number of sentences',col='lightblue')
impact_list <- read.table('impact_list.txt', what=numeric(), sep = "\n", na.string=c("NO IMPACT"))
impact_list <- read.table('impact_list.txt', sep = "\n", na.string=c("NO IMPACT"))
View(impact_list)
hist(impact_list)
hist(impact_list$V1)
head(impact_list)
hist(impact_list$V1)
hist(impact_list$V1[!is.na(impact_list$V1)])
!is.na(impact_list$V1)
impact_list$V1[!is.na(impact_list$V1)]
impact_list <- data.frame(impact=as.numeric(impact_list$V1))
hist(impact_list$V1[!is.na(impact_list$V1)])
View(impact_list)
?as.numeric
impact_list <- data.frame(impact=as.duble(impact_list$V1))
impact_list <- data.frame(impact=as.duoble(impact_list$V1))
impact_list <- data.frame(impact=as.double(impact_list$V1))
hist(impact_list$V1[!is.na(impact_list$impact)])
impact_list$impact
impact_list <- read.table('impact_list.txt', sep = "\n", na.string=c("NO IMPACT"))
impact_list <- data.frame(impact=as.double(impact_list$V1))
hist(impact_list$V1[!is.na(impact_list$impact)])
impact_list <- read.table('impact_list.txt', sep = "\n", na.string=c("NO IMPACT"))
impact_list <- data.frame(impact=as.double(impact_list$V1))
impact_list
impact_list <- read.table('impact_list.txt', sep = "\n", na.string=c("NO IMPACT"))
View(impact_list)
str(impact_list)
tail(impact_list)
impact_list <- read.table('impact_list.txt', sep = "\n", na.string=c("NO IMPACT"))
View(impact_list)
str(impact_list)
impact_list <- read.table('impact_list.txt', sep = "\n", na.string=c("NO IMPACT"))
colnames(impact_list) <- c('impact')
impact_list$impact <- as.numeric(as.character(impact_list$impact))
View(journal_list)
View(impact_list)
hist(impact_list$impact[!is.na(impact_list$impact)])
par(mar=c(2,2,2,2))
hist(impact_list$impact[!is.na(impact_list$impact)])
par(mar=c(4,4,4,4))
hist(impact_list$impact[!is.na(impact_list$impact)])
par(las=2)
par(mar=c(5,5,5,5))
hist(impact_list$impact[!is.na(impact_list$impact)])
hist(impact_list$impact[!is.na(impact_list$impact)], breaks=50)
hist(impact_list$impact[!is.na(impact_list$impact)], breaks=50, axes=F)
axis(side=1, at=0:50, labels=0:50)
axis(side=2, at=seq(0, 5000, 500), at=seq(0, 5000, 500))
axis(side=2, at=seq(0, 5000, 500), labels=seq(0, 5000, 500))
axis(side=2, at=seq(0, 9000, 1000), at=seq(0, 9000, 1000))
hist(impact_list$impact[!is.na(impact_list$impact)], breaks=50, axes=F)
axis(side=1, at=0:50, labels=0:50)
axis(side=2, at=seq(0, 9000, 1000), at=seq(0, 9000, 1000))
axis(side=2, at=seq(0, 9000, 1000), labels=seq(0, 9000, 1000))
hist(impact_list$impact[!is.na(impact_list$impact)], breaks=50, axes=F,
xlab='Impact', ylab='Number of sentences', main='Impact hist', col='lightgreen')
axis(side=1, at=0:50, labels=0:50)
axis(side=2, at=seq(0, 9000, 1000), labels=seq(0, 9000, 1000))
par(mar=c(6,6,6,6))
hist(impact_list$impact[!is.na(impact_list$impact)], breaks=50, axes=F,
xlab='Impact', ylab='Number of sentences', main='Impact hist', col='lightgreen')
axis(side=1, at=0:50, labels=0:50)
axis(side=2, at=seq(0, 9000, 1000), labels=seq(0, 9000, 1000))
length(impact_list)
length(impact_list[!is.na(impact_list)])
impact_list <- read.table('impact_list.txt', sep="\n", na.string=c("NO IMPACT"))
length(impact_list)
length(impact_list[!is.na(impact_list)])
impact_list <- read.table('impact_list.txt', sep="\n", na.string=c("NO IMPACT"))
length(impact_list[!is.na(impact_list)])
length(impact_list[is.na(impact_list)])
length(impact_list[!is.na(impact_list)])
length(impact_list[is.na(impact_list)])
impact_list <- read.table('impact_list.txt', sep="\n", na.string=c("NO IMPACT"))
length(impact_list[!is.na(impact_list)])
length(impact_list[is.na(impact_list)])
source('~/.active-rstudio-document', echo=TRUE)
